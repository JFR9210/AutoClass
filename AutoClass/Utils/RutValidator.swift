//
//  RutValidator.swift
//  AutoClass
//
//  Created by Jonathan Fajardo Roa on 5/15/19.
//  Copyright Â© 2019 JFR. All rights reserved.
//

import Foundation

enum RutValidator {
    
    public static func isValid(rut: String, verifier: String) -> Bool {
        return verifier.uppercased() == verifierCharacter(rut: rut)
    }
    
    public static func verifierCharacter(rut: String) -> String {
//        let digits = rut.characters.compactMap {Int(String($0)) }
        var digits: [Int] = []
        for char:Character in rut {
            digits.append(Int(String(char))!)
        }
        let indexedDigits = Array(digits.reversed().enumerated())
        let verifierCode = mod11(enumeratedDigits: indexedDigits)
        return verifierCharacter(code: verifierCode)
    }
    
    public static let K = "K"
    
    private static func makeFactor(index: Int) -> Int {
        return 2 + index % 6
    }
    
    private static func mod11(enumeratedDigits: [(offset: Int, element: Int)]) -> Int {
        let sum = enumeratedDigits.reduce(0) { (m, e) in
            return m + e.element * makeFactor(index: e.offset)
        }
        let code = 11 - sum % 11
        return code % 11
    }
    
    private static func verifierCharacter(code: Int) -> String {
        switch code {
        case 0...9: return String(code)
        case 10: return K
        default: fatalError("Invalid numeric code generated by mod11 algorithm")
        }
    }
}
